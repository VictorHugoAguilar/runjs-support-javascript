/* Unary function

Unary function (i.e. monadic) is a function that accepts exactly one argument. 
It stands for a single argument accepted by a function.

Let us take an example of unary function,
*/

const unaryFunction = (a) => console.log(a + 10);
// Add 10 to the given argument and display the value

/* Currying function

Currying is the process of taking a function with multiple arguments and turning 
it into a sequence of functions each with only a single argument. Currying is 
named after a mathematician Haskell Curry. By applying currying, a n-ary function 
turns it into a unary function.

Let's take an example of n-ary function and how it turns into a currying function,
*/

const multiArgFunction = (a, b, c) => a + b + c;
console.log(multiArgFunction(1, 2, 3)); // 6

const curryUnaryFunction = (a) => (b) => (c) => a + b + c;
curryUnaryFunction(1); // returns a function: b => c =>  1 + b + c
curryUnaryFunction(1)(2); // returns a function: c => 3 + c
curryUnaryFunction(1)(2)(3); // returns the number 6

// Curried functions are great to improve code reusability and functional composition.

/* Pure function

A Pure function is a function where the return value is only determined by its arguments 
without any side effects. i.e, If you call a function with the same arguments 'n' number 
of times and 'n' number of places in the application then it will always return the 
same value.

Let's take an example to see the difference between pure and impure functions,
*/

//Impure
let numberArray = [];
const impureAddNumber = (number) => numberArray.push(number);
//Pure
const pureAddNumber = (number) => (argNumberArray) => argNumberArray.concat([number]);

//Display the results
console.log(impureAddNumber(6)); // returns 1
console.log(numberArray); // returns [6]
console.log(pureAddNumber(7)(numberArray)); // returns [6, 7]
console.log(numberArray); // returns [6]

/*
As per the above code snippets, the Push function is impure itself by altering the array 
and returning a push number index independent of the parameter value. . Whereas Concat on 
the other hand takes the array and concatenates it with the other array producing a whole 
new array without side effects. Also, the return value is a concatenation of the 
previous array.

Remember that Pure functions are important as they simplify unit testing without any 
side effects and no need for dependency injection. They also avoid tight coupling and 
make it harder to break your application by not having any side effects. 

These principles are coming together with Immutability concept of ES6 by giving preference 
to const over let usage.
*/
